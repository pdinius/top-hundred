import Head from "next/head";
import styles from "@/styles/Home.module.scss";
import { useEffect, useState } from "react";
import { GameData } from "@/types/game-types";
import { GamePreview } from "@/components/GamePreview";
import { LoadingOverlay } from "@/components/LoadingOverlay";
import { Checkbox } from "@/components/Checkbox";
import { useRouter } from "next/router";
import { LOCAL_KEY, PREV_KEY, PROGRESS_KEY } from "@/constants";

export const cleanString = (s: string) => {
  s = s.replace(/&#039;/g, "'");
  s = s.replace(/&amp;/g, "&");
  return s;
};

const isServer = typeof window === "undefined";

export default function Home() {
  const [games, setGames] = useState("");
  const [gamedata, setGamedata] = useState<
    Array<GameData & { selected: boolean }>
  >([]);
  const [loading, setLoading] = useState(false);
  const [onlyPlayed, setOnlyPlayed] = useState(false);
  const [username, setUsername] = useState("");
  const router = useRouter();

  useEffect(() => {
    if (isServer) return;
    const loaded = localStorage.getItem(LOCAL_KEY);
    if (loaded) {
      setGamedata(JSON.parse(loaded));
    }
  }, []);

  const loadCollection = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!username) return;
    setLoading(true);
    try {
      const data = await fetch(
        `/api/fetch-collection?name=${username}&played=${onlyPlayed}`
      );
      const json: { message: string; data: Array<GameData> } =
        await data.json();
      if (json.message === "A") {
        setGamedata((curr) => {
          const copy = curr.slice();
          for (const gd of json.data) {
            if (!copy.find((c) => c.id === gd.id)) {
              copy.push({ ...gd, selected: false });
            }
          }
          if (!isServer) {
            localStorage.setItem(LOCAL_KEY, JSON.stringify(copy));
          }
          return copy;
        });
      }
    } catch (e) {
      console.log(e);
    } finally {
      setLoading(false);
    }
  };

  const fetchGames = async () => {
    setLoading(true);
    try {
      const fetched = await fetch(
        "/api/fetch-games",
        {
          method: "POST",
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(games.trim().split("\n"))
        }
      );
      const json: { message: string; data: Array<GameData> } =
        await fetched.json();
      if (json.message === "A") {
        setGamedata((curr) => {
          const copy = curr.slice();
          for (const gd of json.data) {
            if (!copy.find((c) => c.id === gd.id)) {
              copy.push({ ...gd, selected: false });
            }
          }
          if (!isServer) {
            localStorage.setItem(LOCAL_KEY, JSON.stringify(copy));
          }
          return copy;
        });
      }
    } catch (e) {
      console.log(e);
    } finally {
      setLoading(false);
    }
  };

  const updateInput =
    (idx: number) => (e: React.ChangeEvent<HTMLInputElement>) => {
      if (e.target.value.match(/\D/)) return;
      setGamedata((curr) => {
        const copy = curr.slice();
        copy[idx].id = e.target.value;
        if (!isServer) {
          localStorage.setItem(LOCAL_KEY, JSON.stringify(copy));
        }
        return copy;
      });
    };

  const updateGameData =
    (idx: number) => (e: React.KeyboardEvent<HTMLInputElement>) => {
      if (e.key === "Enter") {
        setLoading(true);
        fetch(`/api/update-preview?id=${gamedata[idx].id}`)
          .then((res) => {
            res
              .json()
              .then((json) => {
                setGamedata((curr) => {
                  const copy = curr.slice();
                  copy[idx] = json.data;
                  if (!isServer) {
                    localStorage.setItem(LOCAL_KEY, JSON.stringify(copy));
                  }
                  return copy;
                });
              })
              .finally(() => {
                setLoading(false);
              });
          })
          .catch((e) => {
            console.log(e);
            setLoading(false);
          });
      }
    };

  const removeGameData = (idx: number) => () => {
    setGamedata((curr) => {
      const copy = curr.slice();
      copy.splice(idx, 1);
      if (!isServer) {
        localStorage.setItem(LOCAL_KEY, JSON.stringify(copy));
      }
      return copy;
    });
  };

  const toggleSelected = (idx: number) => () => {
    const state = gamedata[idx].selected;
    setGamedata((curr) => {
      const copy = curr.slice();
      copy[idx].selected = !state;
      if (!isServer) {
        localStorage.setItem(LOCAL_KEY, JSON.stringify(copy));
      }
      return copy;
    });
  };

  const count = gamedata.filter((g) => g.selected).length;

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.landing}>
        <section className={styles.left}>
          <form className={styles.innerLeft} onSubmit={loadCollection}>
            <input
              placeholder="username"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className={styles.username}
            />
            <Checkbox
              label="only played"
              val={onlyPlayed}
              setter={setOnlyPlayed}
            />
            <button type="submit" disabled={!username}>
              load collection
            </button>
            <div className={styles.divider}></div>
            <textarea
              placeholder="paste game names..."
              className={styles.gameNames}
              value={games}
              onChange={(e) => setGames(e.target.value)}
            ></textarea>
            <button onClick={fetchGames}>go</button>
          </form>
        </section>
        <section className={styles.right}>
          <div className={styles.topBar}>
            <span>
              # games:{" "}
              <span className="bold-text">
                {count} / {gamedata.length}
              </span>
            </span>
            <button
              onClick={() =>
                setGamedata((curr) => {
                  const copy = curr.slice().map((g) => ({ ...g, selected: true }));
                  if (!isServer) {
                    localStorage.setItem(LOCAL_KEY, JSON.stringify(copy));
                  }
                  return copy;
                })
              }
            >
              select all
            </button>
            <button
              onClick={() =>
                setGamedata((curr) => {
                  const copy = curr.slice().map((g) => ({ ...g, selected: false }));
                  if (!isServer) {
                    localStorage.setItem(LOCAL_KEY, JSON.stringify(copy));
                  }
                  return copy;
                })
              }
            >
              deselect all
            </button>
            <div className={styles.pushed} />
            <button
              onClick={() => {
                const progress = localStorage.getItem(PROGRESS_KEY);
                if (progress) {
                  const prev = localStorage.getItem(PREV_KEY);
                  let prevArr: Array<string> = [];
                  if (prev) {
                    prevArr = JSON.parse(prev);
                  }
                  prevArr.push(progress);
                  localStorage.removeItem(PROGRESS_KEY);
                }
                localStorage.setItem(
                  LOCAL_KEY,
                  JSON.stringify(gamedata.filter((g) => g.selected))
                );
                router.push("rate");
              }}
              className={`${styles.startButton} ${
                count >= 100 ? styles.flashing : ""
              }`}
            >
              start sorting
            </button>
          </div>
          <div className={styles.gameGrid}>
            {gamedata.map((g, i) => (
              <GamePreview
                key={i}
                {...g}
                updateInput={updateInput(i)}
                updateGameData={updateGameData(i)}
                removeGameData={removeGameData(i)}
                toggleSelected={toggleSelected(i)}
              />
            ))}
          </div>
          <LoadingOverlay display={loading} />
        </section>
      </main>
    </>
  );
}
